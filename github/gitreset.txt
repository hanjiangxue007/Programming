# ref: https://www.atlassian.com/git/tutorials/undoing-changes/git-revert

#most dangagerous tool of git is git reset
# there is no way to retrieve the original copy—it is a permanent undo.

NOTE: never use reset after you pushed a stream


# Example 1
==================================

# Edit both hello.py and main.py

# Stage everything in the current directory
git add .

# Realize that the changes in hello.py and main.py
# should be committed in different snapshots

# Unstage main.py
git reset main.py

# Commit only hello.py
git commit -m "Make some changes to hello.py"

# Commit main.py in a separate snapshot
git add main.py
git commit -m "Edit main.py"



# example 2
=================
Removing Local Commits

The next example shows a more advanced use case. 
It demonstrates what happens when you’ve been working 
on a new experiment for a while, but decide to completely 
throw it away after committing a few snapshots.

# Create a new file called `foo.py` and add some code to it

# Commit it to the project history
git add foo.py
git commit -m "Start developing a crazy feature"

# Edit `foo.py` again and change some other tracked files, too

# Commit another snapshot
git commit -a -m "Continue my crazy feature"

# Decide to scrap the feature and remove the associated commits
git reset --hard HEAD~2

The git reset HEAD~2 command moves the current branch backward 
by two commits, effectively removing the two snapshots we just 
created from the project history. Remember that this kind of 
reset should only be used on unpublished commits. 
Never perform the above operation if you’ve already pushed 
your commits to a shared repository.






