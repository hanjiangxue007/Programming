#!/usr/bin/env Rscript
#!/usr/bin/env Rscript
# Bhishan Poudel
# Jan 7, 2016
# clear; Rscript eg1.r
x <- c(1,2,3,4,5,6)   # Create ordered collection (vector) (input are <- or = sign)
y = x^2               # Square the elements of x
cat("The value of y is given below\n")
print(y)              # print (vector) y
source('~/Copy/Programming/R/rprograms/eg1.r')
source('~/Copy/Programming/R/rprograms/plotting/autosPlot.r')
source('~/Copy/Programming/R/rprograms/plotting/autosPlot.r')
source('~/Copy/Programming/R/rprograms/plotting/autosPlot.r')
source('~/Copy/Programming/R/rprograms/plotting/autosPlot.r')
source('~/Copy/Programming/R/rprograms/plotting/plot1.r')
source('plot1.r')
pwd
getwd()
#!/usr/bin/Rscript
source('~/Copy/Programming/R/rprograms/Basics/string.r')
# Bhishan Poudel
# Jan 5, 2016
# clear; Rscript string.r; rm *~
#Extracting Pieces of Strings
st <- dimnames(state.x77)[[1]] # State names, from built-in dataset
print(st[1:5])
# "Alabama"    "Alaska"     "Arizona"    "Arkansas"   "California"
st <- st[1:5]               # Let's just use these five for now
print(substring (st, 1, 3)) # Give me the first three characters from each
# "Ala" "Ala" "Ari" "Ark" "Cal"
print(substring (st, 1:5, 3:7)) # Give me 1:3 from the first, 2-4 from the second...
# "Ala" "las" "izo" "ana" "for"
print(substring (st, nchar(st) - 2, nchar(st))) # Give me the last three
# "ama" "ska" "ona" "sas" "nia"
# function to evalutate string as numeric
str_eval=function(x) {return(eval(parse(text=x)))}
print(str_eval("1:10"))
#eval_str("print(“hi”)")  # double quote in this function doesnot work
print(str_eval("print('hi')")) # but, single quote works
# function to convert _ to .
#####################################################################3
strsplit ("Nospaces", "s")
strsplit ("Nospaces", "s")
strsplit ("Nospaces", "s")
strsplit ("Nospaces", "s")
source('~/Copy/Programming/R/rprograms/Basics/dataTypes.r')
setwd("~/")
source('~/Copy/Programming/R/rprograms/plotting/abline/a.R')
source('~/Copy/Programming/R/rprograms/plotting/abline/a.R')
source('~/Copy/Programming/R/rprograms/plotting/abline/a.R')
source('~/Copy/Programming/R/rprograms/plotting/abline/a.R')
addinexamples:::reformatAddin()
source('~/Copy/Programming/R/rprograms/plotting/abline/a.R')
install.packages("rstudioapi", type = "source")
source('~/Copy/Programming/R/rprograms/plotting/abline/a.R')
addinexamples:::reformatAddin()
addinexamples:::subsetAddin()
addinexamples:::reformatAddin()
addinexamples:::findAndReplaceAddin()
View(bhishan)
View(bhishan)
source('~/.Rprofile')
View(bhishan)
View(bhishan)
addinexamples:::subsetAddin()
addinexamples:::findAndReplaceAddin()
source('~/Copy/Programming/R/rprograms/plotting/abline/a.R')
source('~/Copy/Programming/R/rprograms/plotting/abline/a.R')
View(bhishan)
View(bhishan)
View(bhishan)
View(bhishan)
source('~/try.r')
getwd()
source('~/eg1.r')
source('~/Copy/Programming/R/rprograms/plotting/plot1.r')
source('~/Copy/Programming/R/rprograms/hello.r')
source('~/Copy/Programming/R/rprograms/hello.r')
source('~/Copy/Programming/R/rprograms/hello.r')
source('~/Copy/Programming/R/rprograms/hello.r')
# source the code, it gives path and copy paste the path in setwd
setwd("~/Copy/Programming/R/rprograms/")
cat("Hello World!\n")
cat("My name is Bhishan Poudel\n")
cat("The date is Jan 7, 2016 Thursday\n")
print("This is print example")
x <- c(1, 5, 4, 9, 0)
print(x)
typeof(x)
# [1] "double"
length(x)
x[order(x)]
# character vectors
y <- setNames(x, letters[1:4])
y[c("d", "c", "a")]
# x 1, 5, 4, 9, 0
# y a  b  c  d  e
# example 2
x <- c(1, 5.4, TRUE, "hello")
x
typeof(x)
source('~/Copy/2016Spring/RProgramming/presentation/dataTypes/vector1.r')
y <- setNames(x, letters[1:5])
y[c("d", "c", "a")]
# x 1, 5, 4, 9, 0
# y a  b  c  d  e
# example 2
x <- c(1, 5.4, TRUE, "hello")
x
# numeric vectors
x <- c(1, 5, 4, 9, 0)
print(x)
typeof(x)
# [1] "double"
length(x)
x[order(x)]
# character vectors
y <- setNames(x, letters[1:4])
y[c("d", "c", "a")]
# x 1, 5, 4, 9, 0
# y a  b  c  d  e
# example 2
x <- c(1, 5.4, TRUE, "hello")
x <- c(1, 5, 4, 9, 0)
print(x)
typeof(x)
# [1] "double"
length(x)
x[order(x)]
# character vectors
y <- setNames(x, letters[3:4])
y[c("d", "c", "a")]
# x 1, 5, 4, 9, 0
y
y <- setNames(x, letters[1:4])
y
y <- setNames(x, letters[1:5])
y
source('~/Copy/2016Spring/RProgramming/presentation/dataTypes/vector1.r')
# numeric vectors
# numeric vectors
x <- c(1, 5, 4, 9, 0)
print(x)
typeof(x)
# [1] "double"
length(x)
x[order(x)]
# character vectors
y <- setNames(x, letters[3:4])
y[c("d", "c", "a")]
y <- setNames(x, 1:5)
y[c("d", "c", "a")]
# x 1, 5, 4, 9, 0
# y a  b  c  d  e
# example 2
y
source('~/Copy/2016Spring/RProgramming/presentation/dataTypes/vector1.r')
x <- c(1, 5, 4, 9, 0)
print(x)
typeof(x)
# [1] "double"
length(x)
x[order(x)]
# character vectors
y <- setNames(x, letters[3:4])
y[c("d", "c", "a")]
y <- setNames(x, 2:6)
y[c("d", "c", "a")]
y
y[2]
y["2"]
typeof(y)
cat("\nWe can create a data frame using the data.frame() function \n")
x <- data.frame("SN"=1:2,"Age"=c(21,15),"Name"=c("John","Dora"))
str(x)
x
typeof(x)
typeof(x[1])
typeof(x[,1])
p = 5
typeof(p)
p = 5.5
p * x[1,1]
cat("\nWe can create a data frame using the data.frame() function \n")
x <- data.frame("SN"=1:2,"Age"=c(21,15),"Name"=c("John","Dora"))
str(x)
typeof(x[,1])
cat("\nNotice above that the third column, Name is of type factor, instead of a character vector")
cat("\nTo suppress this behavior, we can pass the argument stringsAsFactors=FALSE.\n")
x <- data.frame("SN"=1:2,"Age"=c(21,15),"Name"=c("John","Dora"),stringsAsFactors=FALSE)
str(x)    # now the third column is a character vector
cat("\nMany data input functions of R like, read.table(), read.csv(), read.delim(), read.fwf() also read data into a data frame.")
#########################################################################################################
#   DATA-FRAME COMPONENT ACCESSING (access like a list and access like matrix)
#########################################################################################################
cat("\nAccessing Components in Data Frame \n")
cat("\nAccessing like a list \n")
x["Name"]    # Name 1 John 2 Dora
x$Name       # [1] "John" "Dora"
x[["Name"]]  # [1] "John" "Dora"
x[[3]]       # [1] "John" "Dora"
cat("\nAccessing like a matrix \n")
cat("library(help = 'datasets')\n")
str(trees)
cat("We can see that trees is a data frame with 31 rows and 3 columns\n")
head(trees,n=3)
trees[2:3,]    # select 2nd and 3rd row
trees[trees$Height > 82,]    # selects rows with Height greater than 82
cat("rows 10,11,12 values of column 2 as a vector\n")
trees[10:12,2]
cat("rows 10,11,12 values of column 2 as a matrix\n")
trees[10:12,2, drop=FALSE]
#########################################################################################################
#   DATA-FRAME MODIFICATION (adding component, deleting component)
#########################################################################################################
cat("\nModifying a Data Frame\n")
x
x[1,"Age"] <- 20; x
cat("\nAdding Components \n")
source('~/Copy/2016Spring/RProgramming/presentation/dataTypes/dataframe1.r')
cat("\nAccessing like a matrix \n")
cat("library(help = 'datasets')\n")
str(trees)
cat("We can see that trees is a data frame with 31 rows and 3 columns\n")
trees
cat("\nAccessing like a matrix \n")
cat("library(help = 'datasets')\n")
str(trees)
cat("We can see that trees is a data frame with 31 rows and 3 columns\n")
head(trees,n=3)
trees[2:3,]    # select 2nd and 3rd row
trees[trees$Height > 82,]    # selects rows with Height greater than 82
source('~/Copy/2016Spring/RProgramming/presentation/dataTypes/dataframe1.r')
source('~/Copy/2016Spring/RProgramming/presentation/dataTypes/dataframe1.r')
cat("\nAccessing like a matrix \n")
cat("library(help = 'datasets')\n")
str(trees)
cat("We can see that trees is a data frame with 31 rows and 3 columns\n")
head(trees,n=3)
trees[2:3,]    # select 2nd and 3rd row
y <- trees[trees$Height > 82 || trees$Girth > 13]    # selects rows with Height greater than 82
print(y)
source('~/Copy/2016Spring/RProgramming/presentation/dataTypes/dataframe1.r')
str(trees)
cat("We can see that trees is a data frame with 31 rows and 3 columns\n")
head(trees,n=3)
trees[2:3,]    # select 2nd and 3rd row
y <- trees[trees$Height > 82 || trees$Girth > 13,]    # selects rows with Height greater than 82
print(y)
trees
help(:)
help("cat")
