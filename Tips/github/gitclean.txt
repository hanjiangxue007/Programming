ref: https://www.atlassian.com/git/tutorials/undoing-changes/git-reset





example:
=========

# Edit some existing files
# Add some new files
# Realize you have no idea what you're doing

# Undo changes in tracked files
git reset --hard

# Remove untracked files
git clean -df









git clean

The git clean command removes untracked 
files from your working directory. 
This is really more of a convenience command, 
since it’s trivial to see which files are 
untracked with git status and remove them manually. 
Like an ordinary rm command, git clean is not undoable, 
so make sure you really want to delete the untracked 
files before you run it.

The git clean command is often executed in 
conjunction with git reset --hard. Remember 
that resetting only affects tracked files, 
so a separate command is required for 
cleaning up untracked ones. Combined, 
these two commands let you return the 
working directory to the exact state 
of a particular commit.


Usage

git clean -n

Perform a “dry run” of git clean. 
This will show you which files are going 
to be removed without actually doing it.

git clean -f

Remove untracked files from the current directory. 
The -f (force) flag is required unless the clean.
requireForce configuration option is set to false 
(it's true by default). This will not remove 
untracked folders or files specified by .gitignore.

git clean -f <path>

Remove untracked files, but limit the 
operation to the specified path.

git clean -df

Remove untracked files and untracked 
directories from the current directory.

git clean -xf

Remove untracked files from the current directory 
as well as any files that Git usually ignores.
