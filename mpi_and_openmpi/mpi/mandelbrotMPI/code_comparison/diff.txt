3c3,5
<  * with an image of the Mandelbrot set. */
---
>  * with an image of the Mandelbrot set.
>  * Code amended to run using MPI in a dynamic load balancing configuration                                                       
>  * for HW2 -Martin Graham */
6a9
> #include <mpi.h>
7a11
> #define tag 100
20c24
<    double a, double b, double c, double d, int v );
---
>    double a, double b, double c, double d, int v,int p);
35a40,42
> int manager(FILE * f,double a,double b,double c, double d,int rows,int columns,int p);
> 
> int worker(int i,int (*f)(double x,double y));
39,66c46,85
<    int interactive = 0; /* set to 1 for interactive version */
<    int verbose = 0;     /* if 1, then more diagnostics */
<    int rows,columns;
<    double a,b,c,d;
<    char filename[80];
<    FILE *outputfile;
< 
<    if(interactive==1)
<    {
<       printf("Give the number of rows : "); scanf("%d",&rows);
<       printf("Give the number of columns : "); scanf("%d",&columns);
<       printf("Give the lower bound for x : "); scanf("%lf",&a);
<       printf("Give the upper bound for x : "); scanf("%lf",&b);
<       printf("Give the lower bound for y : "); scanf("%lf",&c);
<       printf("Give the upper bound for y : "); scanf("%lf",&d);
<       printf("Give the name of the output file : "); scanf("%s",filename);
<       outputfile = fopen(filename,"w");
<       printf("See the file %s for results...\n",filename);
<    }
<    else
<    {
<       rows = 500; columns = 500;
<       a = -2.0; b = 2.0; c = -2.0; d = 2.0;
<       outputfile = fopen("mandelbrot.ps","w");
<    }
<    write_postscript_plot(outputfile,rows,columns,a,b,c,d,verbose);
<    fclose(outputfile);
< 
---
>    int p,myid;
>    MPI_Init(&argc,&argv);
>    MPI_Comm_size(MPI_COMM_WORLD,&p);
>    MPI_Comm_rank(MPI_COMM_WORLD,&myid);
>    
>    if(myid==0)
>      {
>        int interactive = 0; /* set to 1 for interactive version */
>        int verbose = 0;     /* if 1, then more diagnostics */
>        int rows,columns;
>        double a,b,c,d;
>        char filename[80];
>        FILE *outputfile;
>        
>        if(interactive==1)
> 	 {
> 	   printf("Give the number of rows : "); scanf("%d",&rows);
> 	   printf("Give the number of columns : "); scanf("%d",&columns);
> 	   printf("Give the lower bound for x : "); scanf("%lf",&a);
> 	   printf("Give the upper bound for x : "); scanf("%lf",&b);
> 	   printf("Give the lower bound for y : "); scanf("%lf",&c);
> 	   printf("Give the upper bound for y : "); scanf("%lf",&d);
> 	   printf("Give the name of the output file : "); scanf("%s",filename);
> 	   //	   outputfile = fopen(filename,"w");
> 	   printf("See the file %s for results...\n",filename);
> 	 }
>        else
> 	 {
> 	   rows = 500; columns = 500;//5000
> 	   a = -2.0; b = 2.0; c = -2.0; d = 2.0;
> 	   outputfile = fopen("mandelbrot.ps","w");
> 	   
> 	 }
>        write_postscript_plot(outputfile,rows,columns,a,b,c,d,verbose,p);
>        fclose(outputfile);
>        //       printf("test\n");
>      }
>    else worker(myid,iterate);
>    
>    MPI_Finalize();
72c91
<    double a, double b, double c, double d, int v )
---
>    double a, double b, double c, double d, int v ,int p)
88,94c107,110
<    if(v == 0)
<       for(i=0,y=d; i<rows; i++,y-=dy,fprintf(f,"\n"))
<          for(j=0,x=a; j<columns; j++,x+=dx)
< 	   {
< 	     fprintf(f,"%.2x",255-iterate(x,y)); /* inverted grayscale */
< 	     //printf("x,y,z: %f,%f,%i\n",x,y,iterate(x,y));
< 	   }
---
>    if(v == 0)     manager(f,a,b,c,d,rows,columns,p);
>       /* for(i=0,y=d; i<rows; i++,y-=dy,fprintf(f,"\n")) */
>       /*    for(j=0,x=a; j<columns; j++,x+=dx) */
>       /*       fprintf(f,"%.2x",255-iterate(x,y)); /\* inverted grayscale *\/ */
126a143,233
> }
> 
> int manager(FILE * f,double a,double b,double c, double d,int rows,int columns,int p)
> {
> 
>   double x,y;
>   //  FILE * test=fopen("outfile.ps","w");
>   double dx = (b-a)/(columns-1);
>   double dy = (d-c)/(rows-1);
>   printf("Rows: %i, columns: %i\n",rows,columns);
>   int * values;
>   int k;
>   values=calloc(rows*columns,sizeof(int));
> 
>   int job=-1;
>   int j;
>   int done=0;
> 
>   for(j=1;j<p;j++)
>     {
>       job++;
>       if(job>=rows*columns) break;
>       x=a+dx*(job/rows);
>       y=d-dy*(job%rows);
>       int d=1+(job)%(p-1);
>       MPI_Send(&job,1,MPI_INT,j,tag,MPI_COMM_WORLD);
>       MPI_Send(&x,1,MPI_DOUBLE,j,tag,MPI_COMM_WORLD);
>       MPI_Send(&y,1,MPI_DOUBLE,j,tag,MPI_COMM_WORLD);	    	       
>     }
>   int nextjob=p-1;
>   
>   do
>     {
>       int flag;
>       MPI_Status status;
>       MPI_Iprobe(MPI_ANY_SOURCE,MPI_ANY_TAG,MPI_COMM_WORLD,&flag,&status);
>       if(flag)
> 	{
> 	  j=status.MPI_SOURCE;
> 	  MPI_Recv(&job,1,MPI_INT,j,tag,MPI_COMM_WORLD,&status);
> 	  MPI_Recv(&values[job],1,MPI_INT,j,tag,MPI_COMM_WORLD,&status);	  
> 	  done++;
> 	  if(nextjob<rows*columns)
> 	    {
> 	      x=a+dx*(nextjob/rows);
> 	      y=d-dy*(nextjob%rows);
> 	      MPI_Send(&nextjob,1,MPI_INT,j,tag,MPI_COMM_WORLD);
> 	      MPI_Send(&x,1,MPI_DOUBLE,j,tag,MPI_COMM_WORLD);
> 	      MPI_Send(&y,1,MPI_DOUBLE,j,tag,MPI_COMM_WORLD);
> 	      nextjob++;
> 	    }
> 	  else
> 	    {
> 	      flag=-1;
> 	      MPI_Send(&flag,1,MPI_INT,j,tag,MPI_COMM_WORLD);
> 	    }
> 	  
> 	}
>     } while (done<rows*columns);
>       
>   int i;
>   for(i=0,y=d;i<rows;i++,y-=dy,fprintf(f,"\n"))
>     for(j=0,x=a;j<columns;j++,x+=dx)
>       {
> 	int ind=i*rows+j;
> 	fprintf(f,"%.2x",255-values[ind]); /* inverted grayscale */
>       }
>   free(values);
>   return 0;
> }
> 
> int worker(int i,int (*f)(double x,double y))
> {
>   int myjob,k;
>   double x,y;
>   MPI_Status status;
>   printf("Hello from %i\n",i);
>   do
>     {
>       MPI_Recv(&myjob,1,MPI_INT,0,tag,MPI_COMM_WORLD,&status);
>       if (myjob==-1) break;
> 
>       MPI_Recv(&x,1,MPI_DOUBLE,0,tag,MPI_COMM_WORLD,&status);
>       MPI_Recv(&y,1,MPI_DOUBLE,0,tag,MPI_COMM_WORLD,&status);
>       k=f(x,y);
>       MPI_Send(&myjob,1,MPI_INT,0,tag,MPI_COMM_WORLD);
>       MPI_Send(&k,1,MPI_INT,0,tag,MPI_COMM_WORLD);
>     }
>   while(myjob!=-1);
>   printf("Goodbye from %i\n",i);
>   return 0;
